# Generated by Django 5.0 on 2023-12-30 05:49

import django.contrib.gis.db.models.fields
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AuthGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150, unique=True)),
            ],
            options={
                "db_table": "auth_group",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthGroupPermissions",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_group_permissions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("codename", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "auth_permission",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("is_superuser", models.BooleanField()),
                ("username", models.CharField(max_length=150, unique=True)),
                ("first_name", models.CharField(max_length=150)),
                ("last_name", models.CharField(max_length=150)),
                ("email", models.CharField(max_length=254)),
                ("is_staff", models.BooleanField()),
                ("is_active", models.BooleanField()),
                ("date_joined", models.DateTimeField()),
            ],
            options={
                "db_table": "auth_user",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUserGroups",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_user_groups",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUserUserPermissions",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_user_user_permissions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoAdminLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("action_time", models.DateTimeField()),
                ("object_id", models.TextField(blank=True, null=True)),
                ("object_repr", models.CharField(max_length=200)),
                ("action_flag", models.SmallIntegerField()),
                ("change_message", models.TextField()),
            ],
            options={
                "db_table": "django_admin_log",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoContentType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("app_label", models.CharField(max_length=100)),
                ("model", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "django_content_type",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoMigrations",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("app", models.CharField(max_length=255)),
                ("name", models.CharField(max_length=255)),
                ("applied", models.DateTimeField()),
            ],
            options={
                "db_table": "django_migrations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoSession",
            fields=[
                (
                    "session_key",
                    models.CharField(max_length=40, primary_key=True, serialize=False),
                ),
                ("session_data", models.TextField()),
                ("expire_date", models.DateTimeField()),
            ],
            options={
                "db_table": "django_session",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Pa001PostgisAfricabasin",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("mrbid", models.IntegerField()),
                ("riverbasin", models.CharField(max_length=100)),
                ("sea", models.CharField(max_length=100)),
                ("ocean", models.CharField(max_length=100)),
                ("shapelen", models.FloatField()),
                (
                    "mpoly",
                    django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326),
                ),
            ],
            options={
                "db_table": "PA001_PostGis_africabasin",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Pa001PostgisAfricanriver",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("mrbid", models.IntegerField()),
                ("riverbasin", models.CharField(max_length=100)),
                ("river", models.CharField(max_length=100)),
                ("sea", models.CharField(max_length=100)),
                ("ocean", models.CharField(max_length=100)),
                ("shapelen", models.FloatField()),
                (
                    "mline",
                    django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326),
                ),
            ],
            options={
                "db_table": "PA001_PostGis_africanriver",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Pa001PostgisFuncin",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("comando", models.CharField(max_length=6)),
                ("created", models.DateTimeField()),
                ("updated", models.DateTimeField()),
            ],
            options={
                "db_table": "PA001_PostGis_funci√≥n",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Pa001PostgisGppd",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("id_gpp", models.CharField(max_length=30)),
                ("description", models.CharField(max_length=250)),
                ("user", models.CharField(max_length=150)),
                ("created", models.DateTimeField()),
                ("updated", models.DateTimeField()),
            ],
            options={
                "db_table": "PA001_PostGis_gppd",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Pa001PostgisGppdoption",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("unit", models.CharField(max_length=3)),
                ("id_option", models.CharField(max_length=30)),
                ("outputdir", models.CharField(max_length=255)),
                ("meteo_file", models.CharField(max_length=100)),
                ("outlier", models.BooleanField()),
                ("ustar", models.BooleanField()),
                ("ustar_non_annual", models.BooleanField()),
                ("partition", models.BooleanField()),
                ("fill", models.BooleanField()),
                ("fluxerr", models.BooleanField()),
                ("daily_gpp", models.BooleanField()),
                ("climatological_footprint", models.BooleanField()),
                ("calculated_ffp", models.BooleanField()),
                ("vegetation_indices", models.BooleanField()),
                ("environmental_variables_station", models.BooleanField()),
                ("environmental_variables_satellite", models.BooleanField()),
                ("tower_observations", models.BooleanField()),
                ("df_rainfall_station_switch", models.BooleanField()),
                ("df_meteo_station_switch", models.BooleanField()),
                ("df_rainfall_chirps_switch", models.BooleanField()),
                ("df_temp_modis_switch", models.BooleanField()),
                ("df_meteo_tower_switch", models.BooleanField()),
                ("correlation_analysis", models.BooleanField()),
                ("correlation_analysis_simple", models.BooleanField()),
                ("rei_gpp_switch", models.BooleanField()),
                ("fal_gpp_switch", models.BooleanField()),
                ("las_gpp_switch", models.BooleanField()),
                ("calibration_validation", models.BooleanField()),
                ("modis_analysis", models.BooleanField()),
                ("timeseries_thirty", models.BooleanField()),
                ("timeseries_fifteen", models.BooleanField()),
                ("mapping_gpp", models.BooleanField()),
                ("classification_maps", models.BooleanField()),
                ("maps_from_features", models.BooleanField()),
                ("mapping_gpp_thirty", models.BooleanField()),
                ("mapping_gpp_fifteen", models.BooleanField()),
                ("export_maps_to_drive", models.BooleanField()),
                ("timeformat", models.CharField(max_length=20)),
                ("sep", models.CharField(max_length=1)),
                ("skiprows", models.CharField(max_length=4)),
                ("undef", models.FloatField()),
                ("swthr", models.FloatField()),
                ("outputfile", models.CharField(max_length=20)),
                ("outputname", models.CharField(max_length=40)),
                ("outundef", models.BooleanField()),
                ("outflagcols", models.BooleanField()),
                ("carbonflux", models.CharField(max_length=10)),
                ("remove_sw_in", models.BooleanField()),
                ("nscan", models.IntegerField()),
                ("nfill", models.IntegerField()),
                ("z", models.IntegerField()),
                ("deriv", models.IntegerField()),
                ("ustarmin", models.FloatField()),
                ("nboot", models.IntegerField()),
                ("plateaucrit", models.FloatField()),
                ("seasonout", models.BooleanField()),
                ("applyustarflag", models.BooleanField()),
                ("sw_dev", models.FloatField()),
                ("ta_dev", models.FloatField()),
                ("vpd_dev", models.FloatField()),
                ("longgap", models.IntegerField()),
                ("nogppnight", models.BooleanField()),
                ("carbonfluxlimit", models.IntegerField()),
                ("respirationlimit", models.IntegerField()),
                ("rolling_window_gpp", models.IntegerField()),
                ("rolling_center_gpp", models.BooleanField()),
                ("rolling_min_periods", models.IntegerField()),
                ("altitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("longitude", models.FloatField()),
                ("canopy_height", models.FloatField()),
                ("displacement_height", models.FloatField()),
                ("roughness_lenght", models.FloatField()),
                ("instrument_height_anenometer", models.FloatField()),
                ("instrument_height_gas_analyzer", models.FloatField()),
                ("projection_site_utm_zone", models.IntegerField()),
                ("boundary_layer_height", models.IntegerField()),
                ("domaint_var", models.CharField(max_length=30)),
                ("nxt_var", models.IntegerField()),
                ("rst_var", models.CharField(max_length=20)),
                ("max_cloud_coverage", models.IntegerField()),
                ("crs", models.CharField(max_length=30)),
                ("ndvimask", models.IntegerField()),
                ("mndvimask", models.IntegerField()),
                ("rolling_window_ev_meteo", models.IntegerField()),
                ("rolling_window_ev_meteo_sat", models.IntegerField()),
                ("rolling_window_gpp_modis", models.IntegerField()),
                ("precipitation_data", models.CharField(max_length=20)),
                ("scale_satellite_data", models.IntegerField()),
                ("feature_collection", models.CharField(max_length=50)),
                ("ecosystem_extension", models.IntegerField()),
                ("number_clusters", models.IntegerField()),
                ("training_scale", models.IntegerField()),
                ("training_dataset", models.IntegerField()),
                ("scale_getregion", models.IntegerField()),
                ("vector_scale", models.IntegerField()),
                ("vector_scalex", models.IntegerField()),
                ("created", models.DateTimeField()),
                ("updated", models.DateTimeField()),
            ],
            options={
                "db_table": "PA001_PostGis_gppdoption",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Pa001PostgisImagefile",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("id_gpp", models.CharField(max_length=30)),
                ("f_name", models.CharField(max_length=255)),
                ("image_texto", models.CharField(max_length=255)),
                ("image", models.CharField(max_length=100)),
                ("created", models.DateTimeField()),
                ("updated", models.DateTimeField()),
            ],
            options={
                "db_table": "PA001_PostGis_imagefile",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Pa001PostgisLinkurl",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("nombre", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("url", models.CharField(blank=True, max_length=200, null=True)),
                ("created", models.DateTimeField()),
                ("updated", models.DateTimeField()),
            ],
            options={
                "db_table": "PA001_PostGis_linkurl",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Pa001PostgisMeteouploadfile",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("id_gpp", models.CharField(max_length=30)),
                ("f_name", models.CharField(max_length=255)),
                ("file", models.FileField(upload_to="")),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "PA001_PostGis_meteouploadfile",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Pa001PostgisMyuploadfile",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("id_gpp", models.CharField(max_length=30)),
                ("f_name", models.CharField(max_length=255)),
                ("file", models.FileField(upload_to="")),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "PA001_PostGis_myuploadfile",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Pa001PostgisPoints",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("nombre", models.CharField(max_length=255)),
                ("latitud", models.FloatField()),
                ("longitud", models.FloatField()),
                ("description", models.CharField(max_length=250)),
                ("created", models.DateTimeField()),
                ("updated", models.DateTimeField()),
            ],
            options={
                "db_table": "PA001_PostGis_points",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Pa001PostgisResultfile",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("id_gpp", models.CharField(max_length=30)),
                ("f_name", models.CharField(max_length=255)),
                ("file", models.CharField(max_length=100)),
                ("type_file", models.BooleanField()),
                ("created", models.DateTimeField()),
                ("updated", models.DateTimeField()),
            ],
            options={
                "db_table": "PA001_PostGis_resultfile",
                "managed": False,
            },
        ),
    ]
